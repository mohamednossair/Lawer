package com.lawyer.domain;

import static com.lawyer.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CourtCaseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourtCaseAllPropertiesEquals(CourtCase expected, CourtCase actual) {
        assertCourtCaseAutoGeneratedPropertiesEquals(expected, actual);
        assertCourtCaseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourtCaseAllUpdatablePropertiesEquals(CourtCase expected, CourtCase actual) {
        assertCourtCaseUpdatableFieldsEquals(expected, actual);
        assertCourtCaseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourtCaseAutoGeneratedPropertiesEquals(CourtCase expected, CourtCase actual) {
        assertThat(actual)
            .as("Verify CourtCase auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourtCaseUpdatableFieldsEquals(CourtCase expected, CourtCase actual) {
        assertThat(actual)
            .as("Verify CourtCase relevant properties")
            .satisfies(a -> assertThat(a.getCaseNumber()).as("check caseNumber").isEqualTo(expected.getCaseNumber()))
            .satisfies(a -> assertThat(a.getCaseYear()).as("check caseYear").isEqualTo(expected.getCaseYear()))
            .satisfies(a -> assertThat(a.getCourtCircuit()).as("check courtCircuit").isEqualTo(expected.getCourtCircuit()))
            .satisfies(a -> assertThat(a.getRegistrationDate()).as("check registrationDate").isEqualTo(expected.getRegistrationDate()))
            .satisfies(a -> assertThat(a.getAttorneyNumber()).as("check attorneyNumber").isEqualTo(expected.getAttorneyNumber()))
            .satisfies(a -> assertThat(a.getAttorneyYear()).as("check attorneyYear").isEqualTo(expected.getAttorneyYear()))
            .satisfies(a ->
                assertThat(a.getAttorneyAuthentication()).as("check attorneyAuthentication").isEqualTo(expected.getAttorneyAuthentication())
            )
            .satisfies(a -> assertThat(a.getOpponentName()).as("check opponentName").isEqualTo(expected.getOpponentName()))
            .satisfies(a ->
                assertThat(a.getOpponentDescription()).as("check opponentDescription").isEqualTo(expected.getOpponentDescription())
            )
            .satisfies(a -> assertThat(a.getOpponentAddress()).as("check opponentAddress").isEqualTo(expected.getOpponentAddress()))
            .satisfies(a -> assertThat(a.getSubject()).as("check subject").isEqualTo(expected.getSubject()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            )
            .satisfies(a ->
                assertThat(a.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getUpdatedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourtCaseUpdatableRelationshipsEquals(CourtCase expected, CourtCase actual) {
        assertThat(actual)
            .as("Verify CourtCase relationships")
            .satisfies(a -> assertThat(a.getCourt()).as("check court").isEqualTo(expected.getCourt()))
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()))
            .satisfies(a -> assertThat(a.getCourtCaseType()).as("check courtCaseType").isEqualTo(expected.getCourtCaseType()))
            .satisfies(a -> assertThat(a.getCaseStatus()).as("check caseStatus").isEqualTo(expected.getCaseStatus()))
            .satisfies(a -> assertThat(a.getOpponentLawyerId()).as("check opponentLawyerId").isEqualTo(expected.getOpponentLawyerId()));
    }
}

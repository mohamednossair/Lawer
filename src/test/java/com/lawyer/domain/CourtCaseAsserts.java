package com.lawyer.domain;

import static com.lawyer.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CourtCaseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourtCaseAllPropertiesEquals(CourtCase expected, CourtCase actual) {
        assertCourtCaseAutoGeneratedPropertiesEquals(expected, actual);
        assertCourtCaseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourtCaseAllUpdatablePropertiesEquals(CourtCase expected, CourtCase actual) {
        assertCourtCaseUpdatableFieldsEquals(expected, actual);
        assertCourtCaseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourtCaseAutoGeneratedPropertiesEquals(CourtCase expected, CourtCase actual) {
        assertThat(expected)
            .as("Verify CourtCase auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourtCaseUpdatableFieldsEquals(CourtCase expected, CourtCase actual) {
        assertThat(expected)
            .as("Verify CourtCase relevant properties")
            .satisfies(e -> assertThat(e.getNumber()).as("check number").isEqualTo(actual.getNumber()))
            .satisfies(e -> assertThat(e.getCaseYear()).as("check caseYear").isEqualTo(actual.getCaseYear()))
            .satisfies(e -> assertThat(e.getCourtCircuit()).as("check courtCircuit").isEqualTo(actual.getCourtCircuit()))
            .satisfies(e -> assertThat(e.getRegistrationDate()).as("check registrationDate").isEqualTo(actual.getRegistrationDate()))
            .satisfies(e -> assertThat(e.getAttorneyNumber()).as("check attorneyNumber").isEqualTo(actual.getAttorneyNumber()))
            .satisfies(e -> assertThat(e.getAttorneyYear()).as("check attorneyYear").isEqualTo(actual.getAttorneyYear()))
            .satisfies(e ->
                assertThat(e.getAttorneyAuthentication()).as("check attorneyAuthentication").isEqualTo(actual.getAttorneyAuthentication())
            )
            .satisfies(e -> assertThat(e.getOpponentName()).as("check opponentName").isEqualTo(actual.getOpponentName()))
            .satisfies(e ->
                assertThat(e.getOpponentDescription()).as("check opponentDescription").isEqualTo(actual.getOpponentDescription())
            )
            .satisfies(e -> assertThat(e.getOpponentAddress()).as("check opponentAddress").isEqualTo(actual.getOpponentAddress()))
            .satisfies(e -> assertThat(e.getSubject()).as("check subject").isEqualTo(actual.getSubject()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e ->
                assertThat(e.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(e ->
                assertThat(e.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getUpdatedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCourtCaseUpdatableRelationshipsEquals(CourtCase expected, CourtCase actual) {
        assertThat(expected)
            .as("Verify CourtCase relationships")
            .satisfies(e -> assertThat(e.getCourt()).as("check court").isEqualTo(actual.getCourt()))
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()))
            .satisfies(e -> assertThat(e.getCourtCaseType()).as("check courtCaseType").isEqualTo(actual.getCourtCaseType()))
            .satisfies(e -> assertThat(e.getCaseStatus()).as("check caseStatus").isEqualTo(actual.getCaseStatus()))
            .satisfies(e -> assertThat(e.getOpponentLawyerId()).as("check opponentLawyerId").isEqualTo(actual.getOpponentLawyerId()));
    }
}

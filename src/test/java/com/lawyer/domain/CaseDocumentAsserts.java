package com.lawyer.domain;

import static com.lawyer.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CaseDocumentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseDocumentAllPropertiesEquals(CaseDocument expected, CaseDocument actual) {
        assertCaseDocumentAutoGeneratedPropertiesEquals(expected, actual);
        assertCaseDocumentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseDocumentAllUpdatablePropertiesEquals(CaseDocument expected, CaseDocument actual) {
        assertCaseDocumentUpdatableFieldsEquals(expected, actual);
        assertCaseDocumentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseDocumentAutoGeneratedPropertiesEquals(CaseDocument expected, CaseDocument actual) {
        assertThat(expected)
            .as("Verify CaseDocument auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseDocumentUpdatableFieldsEquals(CaseDocument expected, CaseDocument actual) {
        assertThat(expected)
            .as("Verify CaseDocument relevant properties")
            .satisfies(e -> assertThat(e.getDocumentName()).as("check documentName").isEqualTo(actual.getDocumentName()))
            .satisfies(e -> assertThat(e.getDocumentType()).as("check documentType").isEqualTo(actual.getDocumentType()))
            .satisfies(e -> assertThat(e.getDocumentFile()).as("check documentFile").isEqualTo(actual.getDocumentFile()))
            .satisfies(e ->
                assertThat(e.getDocumentFileContentType())
                    .as("check documentFile contenty type")
                    .isEqualTo(actual.getDocumentFileContentType())
            )
            .satisfies(e ->
                assertThat(e.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(e ->
                assertThat(e.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getUpdatedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseDocumentUpdatableRelationshipsEquals(CaseDocument expected, CaseDocument actual) {
        assertThat(expected)
            .as("Verify CaseDocument relationships")
            .satisfies(e -> assertThat(e.getCourtCase()).as("check courtCase").isEqualTo(actual.getCourtCase()));
    }
}

package com.lawyer.domain;

import static com.lawyer.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CaseDocumentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseDocumentAllPropertiesEquals(CaseDocument expected, CaseDocument actual) {
        assertCaseDocumentAutoGeneratedPropertiesEquals(expected, actual);
        assertCaseDocumentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseDocumentAllUpdatablePropertiesEquals(CaseDocument expected, CaseDocument actual) {
        assertCaseDocumentUpdatableFieldsEquals(expected, actual);
        assertCaseDocumentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseDocumentAutoGeneratedPropertiesEquals(CaseDocument expected, CaseDocument actual) {
        assertThat(actual)
            .as("Verify CaseDocument auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseDocumentUpdatableFieldsEquals(CaseDocument expected, CaseDocument actual) {
        assertThat(actual)
            .as("Verify CaseDocument relevant properties")
            .satisfies(a -> assertThat(a.getDocumentName()).as("check documentName").isEqualTo(expected.getDocumentName()))
            .satisfies(a -> assertThat(a.getDocumentType()).as("check documentType").isEqualTo(expected.getDocumentType()))
            .satisfies(a -> assertThat(a.getDocumentFile()).as("check documentFile").isEqualTo(expected.getDocumentFile()))
            .satisfies(a ->
                assertThat(a.getDocumentFileContentType())
                    .as("check documentFile contenty type")
                    .isEqualTo(expected.getDocumentFileContentType())
            )
            .satisfies(a ->
                assertThat(a.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getCreatedAt())
            )
            .satisfies(a ->
                assertThat(a.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getUpdatedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseDocumentUpdatableRelationshipsEquals(CaseDocument expected, CaseDocument actual) {
        assertThat(actual)
            .as("Verify CaseDocument relationships")
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()))
            .satisfies(a -> assertThat(a.getCourtCase()).as("check courtCase").isEqualTo(expected.getCourtCase()));
    }
}

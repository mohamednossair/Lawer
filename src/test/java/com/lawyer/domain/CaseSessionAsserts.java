package com.lawyer.domain;

import static com.lawyer.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CaseSessionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseSessionAllPropertiesEquals(CaseSession expected, CaseSession actual) {
        assertCaseSessionAutoGeneratedPropertiesEquals(expected, actual);
        assertCaseSessionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseSessionAllUpdatablePropertiesEquals(CaseSession expected, CaseSession actual) {
        assertCaseSessionUpdatableFieldsEquals(expected, actual);
        assertCaseSessionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseSessionAutoGeneratedPropertiesEquals(CaseSession expected, CaseSession actual) {
        assertThat(expected)
            .as("Verify CaseSession auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseSessionUpdatableFieldsEquals(CaseSession expected, CaseSession actual) {
        assertThat(expected)
            .as("Verify CaseSession relevant properties")
            .satisfies(e -> assertThat(e.getSessionDate()).as("check sessionDate").isEqualTo(actual.getSessionDate()))
            .satisfies(e ->
                assertThat(e.getSessionTime())
                    .as("check sessionTime")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getSessionTime())
            )
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e ->
                assertThat(e.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(e ->
                assertThat(e.getUpdatedAt())
                    .as("check updatedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getUpdatedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCaseSessionUpdatableRelationshipsEquals(CaseSession expected, CaseSession actual) {
        assertThat(expected)
            .as("Verify CaseSession relationships")
            .satisfies(e -> assertThat(e.getCourtCase()).as("check courtCase").isEqualTo(actual.getCourtCase()));
    }
}
